// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RestaurantCheckout
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("RestaurantCheckoutSys")]
    public partial class RestaurantCheckoutSysFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RestaurantCheckoutSys.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "RestaurantCheckoutSys", "We need to test the checkout system by inputting value combinations of \r\ncounts", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add CheckOutTest")]
        [NUnit.Framework.CategoryAttribute("AddScenarios")]
        [NUnit.Framework.TestCaseAttribute("7", "4", "58.8", null)]
        [NUnit.Framework.TestCaseAttribute("-2", "-3", "0", null)]
        [NUnit.Framework.TestCaseAttribute("8", "-4", "35.20", null)]
        [NUnit.Framework.TestCaseAttribute("-3", "9", "63.00", null)]
        [NUnit.Framework.TestCaseAttribute("0", "0", "0", null)]
        public virtual void AddCheckOutTest(string countofstarters, string countofmains, string expectedResult, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AddScenarios"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add CheckOutTest", null, @__tags);
#line 5
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
testRunner.Given(string.Format("Calculate the total for {0} starters and {1} mains with total being {2}", countofstarters, countofmains, expectedResult), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add and update CheckOutTest")]
        [NUnit.Framework.CategoryAttribute("Add/UpdateScenarios")]
        [NUnit.Framework.TestCaseAttribute("7", "4", "58.8", "7", "4", "117.6", null)]
        [NUnit.Framework.TestCaseAttribute("-2", "-3", "0", "1", "2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("8", "-4", "35.20", "8", "3", "70.4", null)]
        [NUnit.Framework.TestCaseAttribute("-3", "9", "63.00", "3", "-9", "0", null)]
        [NUnit.Framework.TestCaseAttribute("0", "0", "0", "-1", "-2", "0", null)]
        public virtual void AddAndUpdateCheckOutTest(string countofstarters, string countofmains, string expectedResult, string updatedCountofStarters, string updatedCountofmains, string expectedResultafterUpdate, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Add/UpdateScenarios"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add and update CheckOutTest", null, @__tags);
#line 18
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 19
testRunner.Given(string.Format("Calculate the total for {0} starters and {1} mains with total being {2}", countofstarters, countofmains, expectedResult), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
testRunner.Then(string.Format("Update the total for {0} starters and {1} mains with total being {2} and old valu" +
                        "es being {3} and {4}", updatedCountofStarters, updatedCountofmains, expectedResultafterUpdate, countofstarters, countofmains), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
